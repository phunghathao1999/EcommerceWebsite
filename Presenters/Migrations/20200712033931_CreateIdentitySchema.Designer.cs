// <auto-generated />
using System;
using Infrastructure.Persistence;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace Presenters.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20200712033931_CreateIdentitySchema")]
    partial class CreateIdentitySchema
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "3.1.3")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("ApplicationCore.EF.Cart", b =>
                {
                    b.Property<string>("Idcart")
                        .HasColumnName("IDcart")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime?>("Createday")
                        .HasColumnName("createday")
                        .HasColumnType("date");

                    b.Property<string>("Idaccount")
                        .HasColumnName("IDaccount")
                        .HasColumnType("nvarchar(450)")
                        .HasMaxLength(450);

                    b.Property<decimal?>("Totalprice")
                        .HasColumnName("totalprice")
                        .HasColumnType("money");

                    b.HasKey("Idcart")
                        .HasName("PK__cart__4581138DCE425A7E");

                    b.ToTable("cart");
                });

            modelBuilder.Entity("ApplicationCore.EF.Cartdetail", b =>
                {
                    b.Property<string>("Idcartdetail")
                        .HasColumnName("IDcartdetail")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Idcart")
                        .HasColumnName("IDcart")
                        .HasColumnType("nvarchar(450)")
                        .HasMaxLength(450);

                    b.Property<string>("Idproduct")
                        .HasColumnName("IDproduct")
                        .HasColumnType("nvarchar(450)")
                        .HasMaxLength(450);

                    b.Property<string>("Note")
                        .HasColumnName("note")
                        .HasColumnType("nvarchar(255)")
                        .HasMaxLength(255);

                    b.Property<decimal?>("Price")
                        .HasColumnName("price")
                        .HasColumnType("money");

                    b.Property<int?>("Quantity")
                        .HasColumnName("quantity")
                        .HasColumnType("int");

                    b.HasKey("Idcartdetail")
                        .HasName("PK__cartdeta__6431700507C70DC7");

                    b.HasIndex("Idcart");

                    b.ToTable("cartdetail");
                });

            modelBuilder.Entity("ApplicationCore.EF.Classify", b =>
                {
                    b.Property<string>("Idclassify")
                        .HasColumnName("IDclassify")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Nameclassify")
                        .HasColumnName("nameclassify")
                        .HasColumnType("nvarchar(255)")
                        .HasMaxLength(255);

                    b.HasKey("Idclassify")
                        .HasName("PK__classify__1FB14F2BD4F85462");

                    b.ToTable("classify");
                });

            modelBuilder.Entity("ApplicationCore.EF.Complain", b =>
                {
                    b.Property<string>("Idcomplain")
                        .HasColumnName("IDcomplain")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime?>("Createday")
                        .HasColumnName("createday")
                        .HasColumnType("date");

                    b.Property<string>("Idaccount")
                        .HasColumnName("IDaccount")
                        .HasColumnType("nvarchar(450)")
                        .HasMaxLength(450);

                    b.Property<string>("Idcartdetail")
                        .HasColumnName("IDcartdetail")
                        .HasColumnType("nvarchar(450)")
                        .HasMaxLength(450);

                    b.Property<string>("Status")
                        .HasColumnName("status")
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.HasKey("Idcomplain")
                        .HasName("PK__complain__9289DDF5FBC9B005");

                    b.ToTable("complain");
                });

            modelBuilder.Entity("ApplicationCore.EF.Laptop", b =>
                {
                    b.Property<string>("Idlaptop")
                        .HasColumnName("IDlaptop")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int?>("Count")
                        .HasColumnName("count")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .HasColumnName("description")
                        .HasColumnType("nvarchar(255)")
                        .HasMaxLength(255);

                    b.Property<string>("Idclassify")
                        .HasColumnName("IDclassify")
                        .HasColumnType("nvarchar(450)")
                        .HasMaxLength(450);

                    b.Property<string>("Idtrademark")
                        .HasColumnName("IDtrademark")
                        .HasColumnType("nvarchar(450)")
                        .HasMaxLength(450);

                    b.Property<string>("LinkImg")
                        .HasColumnName("linkIMG")
                        .HasColumnType("char(255)")
                        .IsFixedLength(true)
                        .HasMaxLength(255)
                        .IsUnicode(false);

                    b.Property<string>("Namelaptop")
                        .HasColumnName("namelaptop")
                        .HasColumnType("nvarchar(255)")
                        .HasMaxLength(255);

                    b.Property<decimal?>("Price")
                        .HasColumnName("price")
                        .HasColumnType("money");

                    b.Property<decimal?>("Priceselling")
                        .HasColumnName("priceselling")
                        .HasColumnType("money");

                    b.Property<string>("Status")
                        .HasColumnName("status")
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.HasKey("Idlaptop")
                        .HasName("PK__laptop__F8074072FBDEE2CC");

                    b.HasIndex("Idclassify");

                    b.HasIndex("Idtrademark");

                    b.ToTable("laptop");
                });

            modelBuilder.Entity("ApplicationCore.EF.Notification", b =>
                {
                    b.Property<string>("Idnotification")
                        .HasColumnName("IDnotification")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Content")
                        .HasColumnName("content")
                        .HasColumnType("nvarchar(255)")
                        .HasMaxLength(255);

                    b.Property<int?>("Idaccount")
                        .HasColumnName("IDaccount")
                        .HasColumnType("int");

                    b.HasKey("Idnotification")
                        .HasName("PK__notifica__36098EECB40032C1");

                    b.ToTable("notification");
                });

            modelBuilder.Entity("ApplicationCore.EF.Promotion", b =>
                {
                    b.Property<string>("Idpromotion")
                        .HasColumnName("IDpromotion")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Content")
                        .HasColumnName("content")
                        .HasColumnType("nvarchar(255)")
                        .HasMaxLength(255);

                    b.Property<DateTime?>("Createday")
                        .HasColumnName("createday")
                        .HasColumnType("date");

                    b.Property<string>("Idlaptop")
                        .HasColumnName("IDlaptop")
                        .HasColumnType("nvarchar(450)")
                        .HasMaxLength(450);

                    b.Property<string>("LinkImg")
                        .HasColumnName("linkIMG")
                        .HasColumnType("char(1)")
                        .IsFixedLength(true)
                        .HasMaxLength(1)
                        .IsUnicode(false);

                    b.Property<string>("Linkimgpromotion")
                        .HasColumnName("linkimgpromotion")
                        .HasColumnType("char(1)")
                        .IsFixedLength(true)
                        .HasMaxLength(1)
                        .IsUnicode(false);

                    b.Property<string>("Status")
                        .HasColumnName("status")
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.HasKey("Idpromotion")
                        .HasName("PK__promotio__53DC425E87CDD7D3");

                    b.ToTable("promotion");
                });

            modelBuilder.Entity("ApplicationCore.EF.Trademark", b =>
                {
                    b.Property<string>("Idtrademark")
                        .HasColumnName("IDtrademark")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Trademark1")
                        .HasColumnName("trademark")
                        .HasColumnType("nvarchar(255)")
                        .HasMaxLength(255);

                    b.HasKey("Idtrademark")
                        .HasName("PK__trademar__9120D53811A52407");

                    b.ToTable("trademark");
                });

            modelBuilder.Entity("ApplicationCore.EF.Userinformation", b =>
                {
                    b.Property<string>("IdUser")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Address")
                        .HasColumnName("address")
                        .HasColumnType("nvarchar(255)")
                        .HasMaxLength(255);

                    b.Property<string>("Gender")
                        .HasColumnName("gender")
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.Property<string>("NameUser")
                        .HasColumnType("nvarchar(255)")
                        .HasMaxLength(255);

                    b.Property<int?>("Numberphone")
                        .HasColumnName("numberphone")
                        .HasColumnType("int");

                    b.HasKey("IdUser")
                        .HasName("PK__userinfo__B7C926384607B758");

                    b.ToTable("userinformation");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedName")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedUserName")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(128)")
                        .HasMaxLength(128);

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(128)")
                        .HasMaxLength(128);

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(128)")
                        .HasMaxLength(128);

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(128)")
                        .HasMaxLength(128);

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens");
                });

            modelBuilder.Entity("ApplicationCore.EF.Cartdetail", b =>
                {
                    b.HasOne("ApplicationCore.EF.Cart", "IdcartNavigation")
                        .WithMany("Cartdetail")
                        .HasForeignKey("Idcart")
                        .HasConstraintName("FK__cartdetai__IDcar__7F2BE32F");
                });

            modelBuilder.Entity("ApplicationCore.EF.Laptop", b =>
                {
                    b.HasOne("ApplicationCore.EF.Classify", "IdclassifyNavigation")
                        .WithMany("Laptop")
                        .HasForeignKey("Idclassify")
                        .HasConstraintName("FK__laptop__IDclassi__7D439ABD");

                    b.HasOne("ApplicationCore.EF.Trademark", "IdtrademarkNavigation")
                        .WithMany("Laptop")
                        .HasForeignKey("Idtrademark")
                        .HasConstraintName("FK__laptop__IDtradem__7E37BEF6");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
